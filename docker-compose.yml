# 旅游规划网站 - 整体部署配置
# 使用方法: docker-compose up -d

services:
  # 前端服务
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=http://backend:8000
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped

  # 后端API服务
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - database
      - redis
    environment:
      - DEBUG=false
      - DB_URI=postgresql+psycopg://admin:${DB_PASSWORD:-IDoNotKnow}@database:5432/travel_planner
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-DEMO-SECRET-KEY}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./backend/config.yaml:/app/config.yaml:ro
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL 数据库
  database:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=travel_planner
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=${DB_PASSWORD:-IDoNotKnow}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d travel_planner"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存服务
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx 反向代理 (生产环境)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: travel_planner_network
    driver: bridge

# 环境变量说明:
# DB_PASSWORD: 数据库密码
# JWT_SECRET: JWT密钥
# SECRET_KEY: 应用加密密钥
# 
# 使用示例:
# 1. 开发环境: docker-compose up -d database redis
# 2. 测试环境: docker-compose up -d
# 3. 生产环境: docker-compose --profile production up -d
